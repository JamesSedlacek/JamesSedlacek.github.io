{"identifier":{"url":"doc:\/\/Routing\/documentation\/Routing\/Router","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"symbolKind":"class","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"externalID":"s:7Routing6RouterC","platforms":[{"name":"iOS","introducedAt":"17.0","unavailable":false,"beta":false,"deprecated":false},{"deprecated":false,"unavailable":false,"beta":false,"name":"macOS","introducedAt":"14.0"},{"deprecated":false,"introducedAt":"17.0","unavailable":false,"beta":false,"name":"tvOS"},{"name":"watchOS","unavailable":false,"deprecated":false,"beta":false,"introducedAt":"10.0"}],"title":"Router","navigatorTitle":[{"kind":"identifier","text":"Router"}],"roleHeading":"Class","modules":[{"name":"Routing"}]},"abstract":[{"type":"codeVoice","code":"Router"},{"type":"text","text":" is a final class that acts as the navigation manager within a SwiftUI application, leveraging the "},{"code":"RoutableObject","type":"codeVoice"},{"text":" protocol to handle navigation through a stack of routable destinations.","type":"text"},{"type":"text","text":" "},{"text":"It is specifically designed to work in conjunction with ","type":"text"},{"code":"RoutingView","type":"codeVoice"},{"type":"text","text":" to facilitate dynamic and type-safe navigation between views defined by the "},{"type":"codeVoice","code":"Routes"},{"text":" enum.","type":"text"}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/Routing\/11Observation10ObservableP","doc:\/\/Routing\/documentation\/Routing\/RoutableObject"],"type":"conformsTo","kind":"relationships"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Routes","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Routes","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"},{"text":", ","kind":"text"},{"text":"Routes","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Marked with ","type":"text"},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" to integrate with SwiftUI’s data-driven architecture, "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" ensures that any modifications to the navigation stack prompt automatic UI updates."},{"text":" ","type":"text"},{"type":"text","text":"This behavior is pivotal for creating responsive and state-aware navigation flows in SwiftUI applications."}]},{"type":"paragraph","inlineContent":[{"text":"The class is generic over a ","type":"text"},{"type":"codeVoice","code":"Routes"},{"text":" parameter, which must conform to the ","type":"text"},{"code":"Routable","type":"codeVoice"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"text":"This design guarantees that the navigation stack consists solely of valid, predefined routes, enhancing the robustness and maintainability of the navigation logic.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Usage Example:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["@State private var router: Router<MyRoutes> = .init()","","var body: some View {","    RoutingView(stack: $router.stack) {","        MyRootView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, "},{"type":"codeVoice","code":"RoutingView"},{"type":"text","text":" utilizes a "},{"type":"codeVoice","code":"Router"},{"text":" instance to manage its navigation stack dynamically.","type":"text"},{"type":"text","text":" "},{"text":"This setup allows for seamless navigation between the different views represented by the ","type":"text"},{"type":"codeVoice","code":"MyRoutes"},{"text":" enum, with ","type":"text"},{"code":"Router","type":"codeVoice"},{"type":"text","text":" facilitating the navigation state management."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Properties:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"stack","type":"codeVoice"},{"text":": A mutable array of ","type":"text"},{"type":"codeVoice","code":"Routes"},{"text":" that signifies the current navigation stack.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Observing this property within SwiftUI views triggers re-renders upon its modification, enabling dynamic and reactive navigation experiences."}]}]}]},{"inlineContent":[{"type":"text","text":"Initialization:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"init()"},{"text":": Instantiates a ","type":"text"},{"type":"codeVoice","code":"Router"},{"type":"text","text":" with an initially empty navigation stack."},{"type":"text","text":" "},{"type":"text","text":"This base state is ready to be populated with routable destinations as dictated by the application’s navigation requirements."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Conformance to ","type":"text"},{"type":"codeVoice","code":"RoutableObject"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Router","type":"codeVoice"},{"type":"text","text":" adheres to the "},{"code":"RoutableObject","type":"codeVoice"},{"text":" protocol, implementing essential navigation operations such as navigating backwards, navigating to specific destinations, and managing the navigation stack.","type":"text"},{"type":"text","text":" "},{"text":"These capabilities are crucial for realizing complex navigation structures in a declarative, SwiftUI-compatible manner.","type":"text"}]}]}]}]}],"hierarchy":{"paths":[["doc:\/\/Routing\/documentation\/Routing"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Routing\/documentation\/Routing\/Router\/init()"]},{"identifiers":["doc:\/\/Routing\/documentation\/Routing\/Router\/stack"],"title":"Instance Properties"},{"title":"Type Aliases","identifiers":["doc:\/\/Routing\/documentation\/Routing\/Router\/Destination"]},{"identifiers":["doc:\/\/Routing\/documentation\/Routing\/Router\/RoutableObject-Implementations"],"title":"Default Implementations","generated":true}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/routing\/router"]}],"references":{"doc://Routing/documentation/Routing/Router/RoutableObject-Implementations":{"title":"RoutableObject Implementations","url":"\/documentation\/routing\/router\/routableobject-implementations","type":"topic","kind":"article","identifier":"doc:\/\/Routing\/documentation\/Routing\/Router\/RoutableObject-Implementations","abstract":[],"role":"collectionGroup"},"doc://Routing/documentation/Routing":{"kind":"symbol","url":"\/documentation\/routing","title":"Routing","type":"topic","role":"collection","abstract":[],"identifier":"doc:\/\/Routing\/documentation\/Routing"},"doc://Routing/documentation/Routing/RoutableObject":{"identifier":"doc:\/\/Routing\/documentation\/Routing\/RoutableObject","abstract":[{"code":"RoutableObject","type":"codeVoice"},{"text":" defines a protocol for objects that manage navigation within a SwiftUI application.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It specifies a set of navigation operations that enable type-safe routing between views identified by destinations conforming to the "},{"type":"codeVoice","code":"Routable"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"text":"Implementers of this protocol can control navigation stacks, allowing for forward and backward navigation, programmatically navigating to specific destinations, and modifying the navigation stack as needed.","type":"text"}],"type":"topic","kind":"symbol","title":"RoutableObject","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RoutableObject","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"RoutableObject"}],"url":"\/documentation\/routing\/routableobject","role":"symbol"},"doc://Routing/11Observation10ObservableP":{"type":"unresolvable","title":"Observation.Observable","identifier":"doc:\/\/Routing\/11Observation10ObservableP"},"doc://Routing/documentation/Routing/Router/stack":{"role":"symbol","title":"stack","identifier":"doc:\/\/Routing\/documentation\/Routing\/Router\/stack","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stack","kind":"identifier"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","text":"Routes"},{"kind":"text","text":"]"}],"type":"topic","url":"\/documentation\/routing\/router\/stack","abstract":[],"kind":"symbol"},"doc://Routing/documentation/Routing/Router/Destination":{"title":"Router.Destination","url":"\/documentation\/routing\/router\/destination","navigatorTitle":[{"text":"Destination","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/Routing\/documentation\/Routing\/Router\/Destination","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Destination"}]},"doc://Routing/documentation/Routing/Router/init()":{"title":"init()","url":"\/documentation\/routing\/router\/init()","type":"topic","kind":"symbol","identifier":"doc:\/\/Routing\/documentation\/Routing\/Router\/init()","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}]},"doc://Routing/documentation/Routing/Router":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"title":"Router","role":"symbol","identifier":"doc:\/\/Routing\/documentation\/Routing\/Router","abstract":[{"type":"codeVoice","code":"Router"},{"type":"text","text":" is a final class that acts as the navigation manager within a SwiftUI application, leveraging the "},{"code":"RoutableObject","type":"codeVoice"},{"type":"text","text":" protocol to handle navigation through a stack of routable destinations."},{"type":"text","text":" "},{"text":"It is specifically designed to work in conjunction with ","type":"text"},{"type":"codeVoice","code":"RoutingView"},{"type":"text","text":" to facilitate dynamic and type-safe navigation between views defined by the "},{"code":"Routes","type":"codeVoice"},{"text":" enum.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Router"}],"url":"\/documentation\/routing\/router"}}}